import Text from '../node/Text';let inject = {  measureText(cb) {    let { list, data } = Text.MEASURE_TEXT;    let html = '';    let keys = [];    let chars = [];    for(let i in data) {      if(data.hasOwnProperty(i)) {        let { key, style, s } = data[i];        if(s) {          let inline = `position:absolute;font-family:${style.fontFamily};font-size:${style.fontSize}px`;          for(let j = 0, len = s.length; j < len; j++) {            keys.push(key);            let char = s.charAt(j);            chars.push(char);            html += `<span style="${inline}">${char.replace(/</, '&lt;')}</span>`;          }        }      }    }    if(!html) {      cb();      return;    }    let div = document.createElement('div');    div.style.position = 'absolute';    div.style.left = '99999px';    div.style.top = '-99999px';    div.style.visibility = 'hidden';    document.body.appendChild(div);    div.innerHTML = html;    let cns = div.childNodes;    let { CHAR_WIDTH_CACHE, MEASURE_TEXT } = Text;    for(let i = 0, len = cns.length; i < len; i++) {      let node = cns[i];      let key = keys[i];      let char = chars[i];      let css = window.getComputedStyle(node, null);      CHAR_WIDTH_CACHE[key][char] = parseFloat(css.width);    }    list.forEach(text => text.__measureCb());    cb();    MEASURE_TEXT.list = [];    MEASURE_TEXT.data = {};    document.body.removeChild(div);  },  measureImg(url, cb) {    let img = new Image();    img.onload = function() {      cb({        success: true,        width: img.width,        height: img.height,        source: img,      });    };    img.onerror = function() {      cb({        success: false,      });    };    if(url.substr( 0, 5 ) !== 'data:') {      let host = /^(?:\w+:)?\/\/([^/:]+)/.exec(url);      if(host) {        if(location.hostname !== host[1]) {          img.crossOrigin = 'anonymous';        }      }    }    img.src = url;  },  warn(s) {    console.warn(s);  },  requestAnimationFrame(cb) {    if(typeof requestAnimationFrame !== 'undefined') {      inject.requestAnimationFrame = requestAnimationFrame.bind(window);      requestAnimationFrame(cb);    }    else {      setTimeout(cb, 16.7);      inject.requestAnimationFrame = function(cb) {        setTimeout(cb, 16.7);      };    }  },  now() {    if(typeof performance !== 'undefined') {      inject.now = performance.now.bind(performance);      return performance.now();    }    inject.now = Date.now.bind(Date);    return Date.now();  },};export default inject;